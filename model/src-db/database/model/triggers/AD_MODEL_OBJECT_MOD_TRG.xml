<?xml version="1.0"?>
  <database name="TRIGGER AD_MODEL_OBJECT_MOD_TRG">
    <trigger name="AD_MODEL_OBJECT_MOD_TRG" table="AD_MODEL_OBJECT" fires="before" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[

/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2008 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  devTemplate NUMBER;
  devModule   CHAR(1);
  cuerrentID  VARCHAR2(32);
  cuerrentModuleID  VARCHAR2(32);
  v_AD_TAB_ID       VARCHAR2(32);
  v_AD_TASK_ID      VARCHAR2(32);
  v_AD_WORKFLOW_ID  VARCHAR2(32);
  v_AD_PROCESS_ID   VARCHAR2(32);
  v_AD_FORM_ID      VARCHAR2(32);
  v_AD_REFERENCE_ID VARCHAR2(32);
  v_AD_CALLOUT_ID   VARCHAR2(32);
    
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;



     null;
     /* Mutating tables....
  cuerrentModuleID := NULL;
  
  IF (UPDATING OR INSERTING) THEN
    cuerrentID := :new.AD_Model_Object_ID;
    v_AD_TAB_ID       := :new.AD_TAB_ID;
    v_AD_TASK_ID      := :new.AD_TASK_ID;
    v_AD_WORKFLOW_ID  := :new.AD_WORKFLOW_ID;
    v_AD_PROCESS_ID   := :new.AD_PROCESS_ID;
    v_AD_FORM_ID      := :new.AD_FORM_ID;
    v_AD_REFERENCE_ID := :new.AD_REFERENCE_ID;
    v_AD_CALLOUT_ID   := :new.AD_CALLOUT_ID;
  ELSE
    cuerrentID := :old.AD_Model_Object_ID;
    v_AD_TAB_ID       := :old.AD_TAB_ID;
    v_AD_TASK_ID      := :old.AD_TASK_ID;
    v_AD_WORKFLOW_ID  := :old.AD_WORKFLOW_ID;
    v_AD_PROCESS_ID   := :old.AD_PROCESS_ID;
    v_AD_FORM_ID      := :old.AD_FORM_ID;
    v_AD_REFERENCE_ID := :old.AD_REFERENCE_ID;
    v_AD_CALLOUT_ID   := :old.AD_CALLOUT_ID;
  END IF;
  
  IF (v_AD_TAB_ID       IS NULL AND
    v_AD_TASK_ID      IS NULL AND
    v_AD_WORKFLOW_ID  IS NULL AND
    v_AD_PROCESS_ID   IS NULL AND
    v_AD_FORM_ID      IS NULL AND
    v_AD_REFERENCE_ID IS NULL AND
    v_AD_CALLOUT_ID   IS NULL) THEN
    cuerrentModuleID := '0'; --CORE
  ELSIF v_AD_TAB_ID       IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_TAB
     WHERE AD_TAB_ID = v_AD_TAB_ID;
  ELSIF v_AD_TASK_ID      IS NOT NULL THEN
   
     null;
  ELSIF v_AD_WORKFLOW_ID  IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_WORKFLOW
     WHERE AD_WORKFLOW_ID = v_AD_WORKFLOW_ID;
  ELSIF v_AD_PROCESS_ID   IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_PROCESS
     WHERE AD_PROCESS_ID = v_AD_PROCESS_ID;
  ELSIF v_AD_FORM_ID      IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_FORM
     WHERE AD_FORM_ID = v_AD_FORM_ID;
  ELSIF v_AD_REFERENCE_ID IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_REFERENCE
     WHERE AD_REFERENCE_ID = v_AD_REFERENCE_ID;
  ELSIF v_AD_CALLOUT_ID   IS NOT NULL THEN
    SELECT AD_MODULE_ID
      INTO cuerrentModuleID
      FROM AD_CALLOUT
     WHERE AD_CALLOUT_ID = v_AD_CALLOUT_ID;
  END IF;
  
  IF cuerrentModuleID IS NOT NULL THEN
    SELECT ISInDevelopment
      INTO devModule
      FROM AD_MODULE 
     WHERE AD_MODULE_ID = cuerrentModuleID;
     
    SELECT COUNT(*)
      INTO devTemplate
      FROM AD_MODULE
     WHERE IsInDevelopment = 'Y'
       AND Type = 'T';
    IF (UPDATING AND devTemplate=0 AND devModule='N') THEN
      IF (
          COALESCE(:NEW.AD_Client_ID , '.') != COALESCE(:OLD.AD_Client_ID , '.') OR
          COALESCE(:NEW.AD_Org_ID , '.') != COALESCE(:OLD.AD_Org_ID , '.') OR
          COALESCE(:NEW.IsActive , '.') != COALESCE(:OLD.IsActive , '.') OR
          COALESCE(:NEW.Action , '.') != COALESCE(:OLD.Action , '.') OR
          COALESCE(:NEW.AD_Tab_ID , '.') != COALESCE(:OLD.AD_Tab_ID , '.') OR
          COALESCE(:NEW.Classname , '.') != COALESCE(:OLD.Classname , '.') OR
          COALESCE(:NEW.IsDefault , '.') != COALESCE(:OLD.IsDefault , '.') OR
          COALESCE(:NEW.AD_Task_ID , '.') != COALESCE(:OLD.AD_Task_ID , '.') OR
          COALESCE(:NEW.AD_Workflow_ID , '.') != COALESCE(:OLD.AD_Workflow_ID , '.') OR
          COALESCE(:NEW.AD_Process_ID , '.') != COALESCE(:OLD.AD_Process_ID , '.') OR
          COALESCE(:NEW.AD_Form_ID , '.') != COALESCE(:OLD.AD_Form_ID , '.') OR
          COALESCE(:NEW.AD_Reference_ID , '.') != COALESCE(:OLD.AD_Reference_ID , '.') OR
          COALESCE(:NEW.AD_Callout_ID , '.') != COALESCE(:OLD.AD_Callout_ID , '.') OR
          1=2) THEN
        RAISE_APPLICATION_ERROR(-20532, 'Cannot update an object in a module not in developement and without an active template');
      END IF;
    END IF;
    
    IF ((DELETING OR INSERTING) AND devModule='N') THEN
      RAISE_APPLICATION_ERROR(-20533, 'Cannot insert/delete objects in a module not in development.');
    END IF;
  END IF;
  */
END AD_MODEL_OBJECT_MOD_TRG
]]></body>
    </trigger>
  </database>
