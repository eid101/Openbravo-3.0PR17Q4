<?xml version="1.0"?>
  <database name="FUNCTION GL_PERIOD_OPEN">
    <function name="GL_PERIOD_OPEN" type="VARCHAR">
      <parameter name="p_ad_client_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_dateacct" type="TIMESTAMP" mode="in">
        <default/>
      </parameter>
      <parameter name="p_docbasetype" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_c_acctschema_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Compiere Public
* License 1.1 ("License"); You may not use this file except in
* compliance with the License. You may obtain a copy of the License in
* the legal folder of your Openbravo installation.
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing rights
* and limitations under the License.
* The Original Code is  Compiere  ERP &  Business Solution
* The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
* Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
* parts created by ComPiere are Copyright (C) ComPiere, Inc.;
* All Rights Reserved.
* Contributor(s): Openbravo SL
* Contributions are Copyright (C) 2001-2009 Openbravo, S.L.
*
* Specifically, this derivative work is based upon the following Compiere
* file and version.
*************************************************************************
* $Id: GL_Period_Open.sql,v 1.5 2003/02/07 05:49:58 jjanke Exp $
***
* Title: Period Control
* Description:
* Determine if period is open for DateAcct and DocBaseType (API, ..)
* If C_AcctSchema_ID is specified, check only for this schema,
* otherwise for the first of AD_Client_ID
* Return
*  C_Period_ID if period is open ot 0 if auto control
*  -1 if period is not open
*
* Test:
*  SELECT GL_Period_Open (11, '01-JAN-2002', 'ARI') FROM DUAL
************************************************************************/
    v_C_Calendar_ID VARCHAR2(32) ;
    v_C_Period_ID   varchar2(32) := -1; -- not found
    v_Temp_Period   NUMBER(10) ;
    v_PeriodStatus  C_PeriodControl.PeriodStatus%TYPE;
    --
  TYPE RECORD IS REF CURSOR;
    CUR_AS RECORD;
  BEGIN
    -- Get Calendar
    SELECT MAX(C_Calendar_ID)
    INTO v_C_Calendar_ID
    FROM AD_ClientInfo
    WHERE AD_Client_ID = p_AD_Client_ID;
    IF(v_C_Calendar_ID IS NULL) THEN
      DBMS_OUTPUT.PUT_LINE('NO Calendar') ;
      RETURN NULL;
    END IF;
    --
    FOR CUR_AS IN
      (SELECT AutoPeriodControl,
        Period_OpenHistory,
        Period_OpenFuture
      FROM C_AcctSchema
      WHERE AD_Client_ID = p_AD_Client_ID
        AND(p_C_AcctSchema_ID IS NULL
        OR C_AcctSchema_ID = p_C_AcctSchema_ID)
      )
    LOOP
      DBMS_OUTPUT.PUT_LINE('AcctSchema - Auto=' || CUR_AS.AutoPeriodControl) ;
      v_C_Period_ID := 1;
      IF(CUR_AS.AutoPeriodControl = 'Y') THEN
        IF(p_DateAcct  BETWEEN(TRUNC(now(), 'MM') -CUR_AS.Period_OpenHistory) AND(ADD_MONTHS(TRUNC(now(), 'MM'), 1) +CUR_AS.Period_OpenFuture)) THEN
          DBMS_OUTPUT.PUT_LINE('Open(A) ' ||(TRUNC(now(), 'MM') -CUR_AS.Period_OpenHistory) || ' - ' ||(ADD_MONTHS(TRUNC(now(), 'MM'), 1) +CUR_AS.Period_OpenFuture)) ;
          v_C_Period_ID := 0; -- open
        ELSE
          DBMS_OUTPUT.PUT_LINE('Not in Limits (A) ' ||(TRUNC(now(), 'MM') -CUR_AS.Period_OpenHistory) || ' - ' ||(ADD_MONTHS(TRUNC(now(), 'MM'), 1) +CUR_AS.Period_OpenFuture)) ;
          v_C_Period_ID := -1; -- closed
        END IF;
      END IF; -- No AutoPeriodControl --
      -- Get Period if not AutoPeriodControl aoutside limits
      IF(v_C_Period_ID <> -1) THEN
        SELECT MAX(p.C_Period_ID)
        INTO v_C_Period_ID
        FROM C_Period p,
          C_Year y
        WHERE TRUNC(p_DateAcct) BETWEEN TRUNC(p.StartDate) AND TRUNC(p.EndDate)
          AND p.C_Year_ID = y.C_Year_ID
          AND y.C_Calendar_ID = v_C_Calendar_ID
          AND p.PeriodType = 'S'; -- standard period
        -- We have no Period defined
        IF(v_C_Period_ID IS NULL) THEN
          DBMS_OUTPUT.PUT_LINE('No Period found for Date ' || p_DateAcct) ;
          v_C_Period_ID := -1;
        ELSIF(CUR_AS.AutoPeriodControl <> 'Y') THEN
          -- Check PeriodControl for Period and Document Type
          SELECT MAX(PeriodStatus)
          INTO v_PeriodStatus
          FROM C_PeriodControl
          WHERE C_Period_ID = v_C_Period_ID
            AND DocBaseType = p_DocBaseType;
          IF(v_PeriodStatus IS NULL) THEN
            DBMS_OUTPUT.PUT_LINE('No PeriodStatus found for Period ' || v_C_Period_ID) ;
            v_C_Period_ID := -1;
          ELSIF(v_PeriodStatus = 'O') THEN
            DBMS_OUTPUT.PUT_LINE('Open') ;
          ELSE
            DBMS_OUTPUT.PUT_LINE('NOT Open: PeriodStatus=' || v_PeriodStatus) ;
            v_C_Period_ID := -1;
          END IF;
        END IF;
      END IF;
      EXIT;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Period_ID=' || v_C_Period_ID) ;
    RETURN v_C_Period_ID;
END GL_PERIOD_OPEN
]]></body>
    </function>
  </database>
