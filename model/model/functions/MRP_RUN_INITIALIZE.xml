<?xml version="1.0"?>
  <database name="FUNCTION MRP_RUN_INITIALIZE">
    <function name="MRP_RUN_INITIALIZE" type="NULL">
      <parameter name="p_user_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_org_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_client_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_run" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_planner_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_product_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_product_category_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_bpartner_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_bp_group_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_vendor_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_timehorizon" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_planningdate" type="TIMESTAMP" mode="in">
        <default/>
      </parameter>
      <parameter name="p_production" type="CHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2006 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(4000):='';
  v_Message VARCHAR2(4000):='';
  v_Result NUMBER:=1; -- 0=failure

  v_Count NUMBER;
  v_Aux_ID VARCHAR2(32);
  v_ParentLine VARCHAR2(32);

  FINISH_PROCESS BOOLEAN DEFAULT FALSE;
  --  Parameter
  TYPE RECORD IS REF CURSOR;
  Cur_Product RECORD;
  Cur_OrderLine RECORD;
  Cur_Phase RECORD;
  Cur_SalesForeCast RECORD;
  Cur_RequisitionLine RECORD;
  Cur_Phase_Dependants RECORD;
BEGIN
  BEGIN --BODY
    -- Get Parameters
    FOR Cur_Product IN (SELECT p.M_Product_ID, COALESCE(sd.qtyonhand,0) AS qtyonhand,
                        COALESCE(po.STOCKMIN, p.STOCKMIN, 0) AS STOCKMIN,
                        COALESCE(po.MRP_PlanningMethod_ID, p.MRP_PlanningMethod_ID) AS MRP_PlanningMethod_ID
                        FROM M_PRODUCT p LEFT JOIN M_PRODUCT_ORG po ON p.M_PRODUCT_ID = po.M_PRODUCT_ID
                                                                       AND po.AD_ORG_ID = p_Org_ID
                                         LEFT JOIN (SELECT M_Product_ID, SUM(qtyonhand) as qtyonhand
                                                    FROM M_STORAGE_DETAIL
                                                    GROUP BY M_Product_ID) sd ON p.M_Product_ID = sd.M_Product_ID
                        WHERE (p_product_ID IS NULL OR p.M_PRODUCT_ID = p_Product_ID)
                          AND (p_Product_Category_ID IS NULL OR p.M_PRODUCT_CATEGORY_ID = p_Product_Category_ID)
                          AND (p_Planner_ID IS NULL OR COALESCE(po.MRP_PLANNER_ID, p.MRP_Planner_ID) = p_Planner_ID)
                          AND Ad_Isorgincluded(p_Org_ID, p.AD_ORG_ID, p_Client_ID) > -1
                          AND p.AD_Client_ID = p_Client_ID
                          AND ((p_Production = 'Y' AND p.ISPURCHASED = 'N') OR (p_Production = 'N' AND p.ISPURCHASED = 'Y'))
                          AND P.ISACTIVE = 'Y'
                          AND (p_Production = 'Y' OR
                               (p_Vendor_ID IS NULL
                               OR EXISTS (SELECT 1
                                          FROM M_PRODUCT_PO
                                          WHERE M_PRODUCT_PO.M_PRODUCT_ID = p.M_PRODUCT_ID
                                            AND M_PRODUCT_PO.C_BPARTNER_ID = p_Vendor_ID
                                            AND M_PRODUCT_PO.ISCURRENTVENDOR = 'Y'
                                            AND M_PRODUCT_PO.ISACTIVE = 'Y'
                                          )))
                          AND (p_BPartner_ID IS NULL
                               OR EXISTS (SELECT 1
                                          FROM C_ORDER o, C_ORDERLINE ol
                                          WHERE o.C_ORDER_ID = ol.C_ORDER_ID
                                            AND o.C_BPARTNER_ID = p_BPartner_ID
                                            AND o.IsSOTrx = 'Y'
                                            --AND C_Order_Status(o.C_ORDER_ID) IN (1, 2, 3)
                                            AND o.PROCESSED = 'Y'
                                            AND ol.QTYORDERED <> ol.QTYDELIVERED
                                            AND ol.m_product_id = p.m_product_id
                                            AND ol.DatePromised IS NOT NULL
                                            AND Mrp_Check_Planningmethod(
                                                    COALESCE(po.MRP_PlanningMethod_ID, p.MRP_PlanningMethod_ID),
                                                    'SO', TO_NUMBER(ol.DatePromised - p_PlanningDate), p_TimeHorizon) <> -1
                                            AND Ad_Isorgincluded(o.AD_ORG_ID, p_Org_ID, p_Client_ID) > -1)
                               OR EXISTS (SELECT 1
                                          FROM MRP_SALESFORECAST sf, MRP_SALESFORECASTLINE sfl
                                          WHERE sf.MRP_SALESFORECAST_ID = sfl.MRP_SALESFORECAST_ID
                                            AND sf.IsActive = 'Y'
                                            AND sf.C_BPARTNER_ID = p_BPartner_ID
                                            AND sfl.m_product_id = p.m_product_id
                                            AND Mrp_Check_Planningmethod(
                                                    COALESCE(po.MRP_PlanningMethod_ID, p.MRP_PlanningMethod_ID),
                                                    'SF', TO_NUMBER(sfl.DatePlanned - p_PlanningDate), p_TimeHorizon) <> -1
                                            AND Ad_Isorgincluded(sf.AD_ORG_ID, p_Org_ID, p_Client_ID) > -1)
                              )
                          AND (p_BP_Group_ID IS NULL
                               OR EXISTS(SELECT 1
                                         FROM C_ORDER o, C_ORDERLINE ol, C_BPARTNER bp
                                         WHERE o.C_ORDER_ID = ol.C_ORDER_ID
                                           AND o.C_BPartner_ID = bp.C_BPartner_ID
                                           AND o.IsSOTrx = 'Y'
                                           AND bp.C_BP_Group_ID = p_BP_Group_ID
                                           --AND C_Order_Status(o.C_ORDER_ID) IN (1, 2, 3)
                                           AND o.PROCESSED = 'Y'
                                           AND ol.QTYORDERED <> ol.QTYDELIVERED
                                           AND ol.m_product_id = p.m_product_id
                                           AND ol.DatePromised IS NOT NULL
                                           AND Mrp_Check_Planningmethod(
                                                    COALESCE(po.MRP_PlanningMethod_ID, p.MRP_PlanningMethod_ID),
                                                    'SO', TO_NUMBER(ol.DatePromised - p_PlanningDate), p_TimeHorizon) <> -1
                                           AND Ad_Isorgincluded(o.AD_ORG_ID, p_Org_ID, p_Client_ID) > -1)
                                OR EXISTS (SELECT 1
                                           FROM MRP_SALESFORECAST sf, MRP_SALESFORECASTLINE sfl, C_BPARTNER bp
                                           WHERE sf.MRP_SALESFORECAST_ID = sfl.MRP_SALESFORECAST_ID
                                             AND sf.IsActive = 'Y'
                                             AND sf.C_BPartner_ID = bp.C_BPartner_ID
                                             AND sfl.m_product_id = p.m_product_id
                                             AND bp.C_BP_Group_ID = p_BP_Group_ID
                                             AND Mrp_Check_Planningmethod(
                                                    COALESCE(po.MRP_PlanningMethod_ID, p.MRP_PlanningMethod_ID),
                                                    'SF', TO_NUMBER(sfl.DatePlanned - p_PlanningDate), p_TimeHorizon) <> -1
                                             AND Ad_Isorgincluded(sf.AD_ORG_ID, p_Org_ID, p_Client_ID) > -1)
                              )
      ) LOOP
        IF (p_Production = 'Y') THEN
          SELECT COUNT(*) INTO v_Count
          FROM MRP_RUN_PRODUCTIONLINE
          WHERE M_PRODUCT_ID = Cur_Product.M_Product_ID
            AND MRP_RUN_PRODUCTION_ID = p_Run
            AND inouttrxtype = 'MS';
        ELSE
          SELECT COUNT(*) INTO v_Count
          FROM MRP_RUN_PURCHASELINE
          WHERE M_PRODUCT_ID = Cur_Product.M_Product_ID
            AND MRP_RUN_PURCHASE_ID = p_Run
            AND inouttrxtype = 'MS';
        END IF;

        IF (v_Count = 0) THEN -- First time on this product
          v_ResultStr := 'Inserting stock lines product: ' || Cur_Product.M_Product_ID;
          Mrp_Run_Insertlines(p_Client_ID, p_Org_ID, p_User_ID, p_Run, Cur_Product.M_Product_ID, (-1 * Cur_Product.STOCKMIN), 0, NULL, 'MS', 'Y', NULL, NULL, NULL, NULL, NULL, p_PlanningDate, NULL, p_Production, 'Y', NULL, v_Aux_ID);
          Mrp_Run_Insertlines(p_Client_ID, p_Org_ID, p_User_ID, p_Run, Cur_Product.M_Product_ID, Cur_Product.QtyOnHand, 0, NULL, 'ST', 'Y', NULL, NULL, NULL, NULL, NULL, p_PlanningDate, NULL, p_Production, 'Y', NULL, v_Aux_ID);

          v_ResultStr := 'Inserting Order lines product: ' || Cur_Product.M_Product_ID;
          FOR Cur_OrderLine IN (SELECT Mrp_Check_Planningmethod(Cur_Product.MRP_PlanningMethod_ID,
                                                                (CASE o.IsSOTrx WHEN 'Y' THEN 'SO' ELSE 'PO' END),
                                                                TO_NUMBER(ol.DatePromised - p_PlanningDate), p_TimeHorizon) AS WEIGHTING,
                                      (ol.QTYORDERED - COALESCE(ol.QTYDELIVERED, 0) - COALESCE(matchpo.qty,0)) AS qty,
                                      ol.C_OrderLine_ID, GREATEST(COALESCE(ol.DatePromised, ol.DateOrdered, o.DateOrdered), p_PlanningDate) AS planningDate,
                                      COALESCE(ol.DateOrdered, o.Dateordered) AS dateordered,
                                      o.IsSOTrx
                                 FROM C_ORDER o, C_ORDERLINE ol LEFT JOIN (SELECT C_ORDERLINE_ID, SUM(QTY) as qty FROM m_matchpo WHERE m_inoutline_id is not null group by c_orderline_id) matchpo on ol.c_orderline_id = matchpo.c_orderline_id
                                 WHERE o.C_ORDER_ID = ol.C_ORDER_ID
                                   --AND C_Order_Status(o.C_ORDER_ID) IN (1, 2, 3)
                                   AND o.PROCESSED = 'Y'
                                   AND ol.QTYORDERED <> (COALESCE(ol.QTYDELIVERED,0) + COALESCE(matchpo.qty,0))
                                   AND ol.M_Product_ID = Cur_Product.M_Product_ID
                                   AND Mrp_Check_Planningmethod(Cur_Product.MRP_PlanningMethod_ID,
                                                               (CASE o.IsSOTrx WHEN 'Y' THEN 'SO' ELSE 'PO' END),
                                                               TO_NUMBER(COALESCE(ol.DatePromised, ol.DateOrdered, o.DateOrdered) - p_PlanningDate), p_TimeHorizon) <> -1
                                   AND Ad_Isorgincluded(o.AD_ORG_ID, p_Org_ID, p_Client_ID) > -1
          ) LOOP
            Mrp_Run_Insertlines(p_Client_ID, p_Org_ID, p_User_ID, p_Run, Cur_Product.M_Product_ID, (CASE Cur_OrderLine.IsSOTrx WHEN 'Y' THEN (-1*Cur_OrderLine.Qty*Cur_OrderLine.Weighting) ELSE (Cur_OrderLine.Qty*Cur_OrderLine.Weighting) END), (CASE Cur_OrderLine.IsSOTrx WHEN 'Y' THEN (-1*Cur_OrderLine.Qty*Cur_OrderLine.Weighting) ELSE (Cur_OrderLine.Qty*Cur_OrderLine.Weighting) END), NULL, (CASE Cur_OrderLine.IsSOTrx WHEN 'Y' THEN 'SO' ELSE 'PO' END), 'Y', Cur_OrderLine.C_OrderLine_ID, NULL, NULL, NULL, NULL, Cur_OrderLine.planningDate, Cur_OrderLine.dateordered, p_Production, (CASE WHEN (Cur_OrderLine.IsSOTrx = 'Y' AND p_Production = 'Y') OR (p_Production = 'N' AND Cur_OrderLine.Qty < 0 ) THEN 'N' ELSE 'Y' END), NULL, v_Aux_ID);
          END LOOP;

          IF p_Production = 'Y' THEN
            v_ResultStr := 'Inserting Work Phases for product: ' || Cur_Product.M_Product_ID;
            FOR Cur_Phase IN (SELECT A.*
                              FROM (
                                SELECT WR.MA_WORKREQUIREMENT_ID, GREATEST(WR.ENDDATE, p_Planningdate) AS enddate, WR.STARTDATE,
                                   SUM(CASE WPP.PRODUCTIONTYPE WHEN '+' THEN (WPP.MOVEMENTQTY * WP.QUANTITY)
                                       WHEN '-' THEN ((-1 * WPP.MOVEMENTQTY) * WP.QUANTITY)
                                       ELSE 0 END) AS EXPECTED,
                                   SUM(CASE WPP.PRODUCTIONTYPE WHEN '+' THEN (WPP.MOVEMENTQTY * (WP.QUANTITY - WP.DONEQUANTITY))
                                       WHEN '-' THEN ((-1 * WPP.MOVEMENTQTY) * (WP.QUANTITY - WP.DONEQUANTITY))
                                       ELSE 0 END) AS TOTAL,
                                   Mrp_Check_Planningmethod(Cur_Product.MRP_PlanningMethod_ID, 'WR',
                                TO_NUMBER(WR.LAUNCHDATE - p_PlanningDate), p_TimeHorizon) AS WEIGHTING
                                FROM MA_WORKREQUIREMENT WR, MA_WRPHASE WP, MA_WRPHASEPRODUCT WPP
                                WHERE WR.MA_WORKREQUIREMENT_ID = WP.MA_WORKREQUIREMENT_ID
                                  AND WP.MA_WRPHASE_ID = WPP.MA_WRPHASE_ID
                                  AND WR.CLOSED = 'N'
                                  AND WP.donequantity < WP.quantity
                                  AND WPP.M_PRODUCT_ID = Cur_Product.M_Product_ID
                                  AND TO_NUMBER(WR.ENDDATE - p_PlanningDate) < p_TimeHorizon
                                  AND Mrp_Check_Planningmethod(Cur_Product.MRP_PlanningMethod_ID, 'WR',
                                  TO_NUMBER(WR.LAUNCHDATE - p_PlanningDate), p_TimeHorizon) <> -1
                                  AND Ad_Isorgincluded(WR.AD_ORG_ID, p_Org_ID, p_Client_ID) > -1
                                  AND NOT EXISTS(SELECT 1 FROM MRP_RUN_PRODUCTIONLINE RPL WHERE RPL.MA_WORKREQUIREMENT_ID = WR.MA_WORKREQUIREMENT_ID AND RPL.MRP_RUN_PRODUCTION_ID = p_Run)
                                GROUP BY WR.MA_WORKREQUIREMENT_ID, WR.ENDDATE, WR.STARTDATE, WR.LAUNCHDATE) A
                              WHERE A.EXPECTED >0
                                AND A.TOTAL <> 0
            ) LOOP
              Mrp_Run_Insertlines(p_Client_ID, p_Org_ID, p_User_ID, p_Run, Cur_Product.M_Product_ID, Cur_Phase.total*Cur_Phase.WEIGHTING, Cur_Phase.Total*Cur_Phase.WEIGHTING, NULL, 'WR', 'Y', NULL, Cur_Phase.MA_WorkRequirement_ID, NULL, NULL, NULL, Cur_Phase.EndDate, Cur_Phase.StartDate, p_Production, 'Y', NULL, v_ParentLine);
              FOR Cur_Phase_Dependants IN (
                SELECT A.*
                FROM (
                  SELECT WP.MA_WORKREQUIREMENT_ID, WPP.M_Product_ID,
                     SUM(CASE WPP.PRODUCTIONTYPE WHEN '+' THEN (WPP.MOVEMENTQTY * WP.QUANTITY)
                         WHEN '-' THEN ((-1 * WPP.MOVEMENTQTY) * WP.QUANTITY)
                         ELSE 0 END) AS EXPECTED,
                     SUM(CASE WPP.PRODUCTIONTYPE WHEN '+' THEN (WPP.MOVEMENTQTY * (WP.QUANTITY - WP.DONEQUANTITY))
                         WHEN '-' THEN ((-1 * WPP.MOVEMENTQTY) * (WP.QUANTITY - WP.DONEQUANTITY))
                         ELSE 0 END) AS TOTAL
                  FROM MA_WRPHASE WP, MA_WRPHASEPRODUCT WPP
                  WHERE WP.MA_WORKREQUIREMENT_ID = Cur_Phase.MA_WORKREQUIREMENT_ID
                    AND WP.MA_WRPHASE_ID = WPP.MA_WRPHASE_ID
                    AND WPP.M_PRODUCT_ID <> Cur_Product.M_Product_ID
                  GROUP BY WP.MA_WORKREQUIREMENT_ID, WPP.M_Product_ID) A
                WHERE A.EXPECTED <> 0
                  AND A.TOTAL <> 0
              ) LOOP
              Mrp_Run_Insertlines(p_Client_ID, p_Org_ID, p_User_ID, p_Run, Cur_Phase_Dependants.M_Product_ID, Cur_Phase_Dependants.total*Cur_Phase.WEIGHTING, Cur_Phase_Dependants.Total*Cur_Phase.WEIGHTING, v_ParentLine, 'WR', 'Y', NULL, Cur_Phase.MA_WorkRequirement_ID, NULL, NULL, NULL, (CASE WHEN Cur_Phase_Dependants.Total>0 THEN Cur_Phase.EndDate ELSE Cur_Phase.StartDate END), Cur_Phase.StartDate, p_Production, (CASE WHEN Cur_Phase_Dependants.Total>0 THEN 'Y' ELSE 'N' END), NULL, v_Aux_ID);
              MRP_RUN_INITIALIZE(p_User_ID, p_Org_ID, p_Client_ID, p_Run, p_Planner_ID,
                       Cur_Phase_Dependants.M_Product_ID, NULL, NULL, NULL, NULL, p_TimeHorizon,
                       p_PlanningDate, p_Production);
              END LOOP;
            END LOOP;
          END IF;

          v_ResultStr := 'Inserting Sales forecast for product: ' || Cur_Product.M_Product_ID;
          FOR Cur_SalesForeCast IN (SELECT Mrp_Check_Planningmethod(Cur_Product.MRP_PlanningMethod_ID,
                                              'SF', TO_NUMBER(sfl.DatePlanned - p_PlanningDate), p_TimeHorizon) AS Weighting,
                                          sfl.MRP_SALESFORECASTLINE_ID, GREATEST(sfl.DatePlanned, p_Planningdate) AS DatePlanned,
                                          -1*sfl.qty AS qty
                                     FROM MRP_SALESFORECAST sf, MRP_SALESFORECASTLINE sfl
                                     WHERE sf.MRP_SALESFORECAST_ID = sfl.MRP_SALESFORECAST_ID
                                       AND (sf.IsActive = 'Y' AND sfl.Isactive = 'Y')
                                       AND sfl.M_Product_ID = Cur_Product.M_Product_ID
                                       AND Mrp_Check_Planningmethod(Cur_Product.MRP_PlanningMethod_ID,
                                              'SF', TO_NUMBER(sfl.DatePlanned - p_PlanningDate), p_TimeHorizon) <> -1
                                       AND Ad_Isorgincluded(sf.AD_ORG_ID, p_Org_ID, p_Client_ID) > -1
          ) LOOP
            Mrp_Run_Insertlines(p_Client_ID, p_Org_ID, p_User_ID, p_Run, Cur_Product.M_Product_ID, (Cur_SalesForeCast.Qty*Cur_SalesForeCast.Weighting), (Cur_SalesForeCast.Qty*Cur_SalesForeCast.Weighting), NULL, 'SF', 'Y', NULL, NULL, Cur_SalesForeCast.MRP_SALESFORECASTLINE_ID, NULL, NULL, Cur_SalesForeCast.DatePlanned, Cur_SalesForeCast.DatePlanned, p_Production, CASE WHEN (Cur_SalesForeCast.Qty < 0 AND p_Production='Y') OR (Cur_SalesForeCast.Qty > 0 AND p_Production='N') THEN 'N' ELSE 'Y' END, NULL, v_Aux_ID);
          END LOOP;

          IF p_Production = 'N' THEN
            v_ResultStr := 'Inserting Requisition lines for product: ' || Cur_Product.M_Product_ID;
            FOR Cur_RequisitionLine IN (SELECT r.M_RequisitionLine_ID, (-1)*(r.qty-r.orderedqty) AS qty, GREATEST(r.NeedByDate, p_PlanningDate) AS DATEPLANNED,
                                               Mrp_Check_Planningmethod(Cur_Product.MRP_PlanningMethod_ID,
                                              'MF', TO_NUMBER(r.NeedByDate - p_PlanningDate), p_TimeHorizon) AS Weighting
                                          FROM M_REQUISITIONLINE r, M_REQUISITION rr
                                         WHERE r.isActive = 'Y'
                                           AND r.M_REQUISITION_ID = rr.M_REQUISITION_ID
                                           AND rr.DOCSTATUS = 'CO'
                                           AND r.REQSTATUS = 'O'
                                           AND NOT (COALESCE(r.LOCKEDBY, p_User_ID) <> p_User_ID
                                                    AND COALESCE(r.LOCKDATE, TO_DATE('01-01-1900', 'DD-MM-YYYY')) >= (now()-3))
                                           AND Mrp_Check_Planningmethod(Cur_Product.MRP_PlanningMethod_ID,
                                              'MF', TO_NUMBER(r.NeedByDate - p_PlanningDate), p_TimeHorizon) <> -1
                                           AND r.M_Product_ID = Cur_Product.M_Product_ID
            ) LOOP
              Mrp_Run_Insertlines(p_Client_ID, p_Org_ID, p_User_ID, p_Run, Cur_Product.M_Product_ID, Cur_RequisitionLine.qty*Cur_RequisitionLine.Weighting, Cur_RequisitionLine.qty*Cur_RequisitionLine.Weighting, NULL, 'MF', 'Y', NULL, NULL, NULL, Cur_RequisitionLine.M_RequisitionLine_ID, NULL, Cur_RequisitionLine.DatePlanned, Cur_RequisitionLine.DatePlanned, p_Production, CASE WHEN (Cur_RequisitionLine.Qty > 0) THEN 'N' ELSE 'Y' END, NULL, v_Aux_ID);
              UPDATE M_REQUISITIONLINE
              SET LOCKEDBY = p_User_ID,
                  LOCKDATE = now(),
                  LOCKQTY = Cur_RequisitionLine.qty,
                  LOCKCAUSE = 'P'
              WHERE M_REQUISITIONLINE_ID = Cur_RequisitionLine.M_RequisitionLine_ID;
            END LOOP;
          END IF;
        END IF; -- v_Count = 0
    END LOOP;

  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('MRP_RUN_INITIALIZE exception: ' || v_ResultStr);
  RAISE;
--  RETURN;
END MRP_RUN_INITIALIZE
]]></body>
    </function>
  </database>
