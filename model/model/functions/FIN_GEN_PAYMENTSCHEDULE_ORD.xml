<?xml version="1.0"?>
  <database name="FUNCTION FIN_GEN_PAYMENTSCHEDULE_ORD">
    <function name="FIN_GEN_PAYMENTSCHEDULE_ORD" type="NULL">
      <parameter name="p_ep_instance" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2010 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

p_message VARCHAR(2000);
p_record_id VARCHAR(60);
p_docAction VARCHAR(60);
p_user VARCHAR(60);
p_result NUMBER;

v_ResultStr VARCHAR2(2000):='';
v_GrandTotal NUMBER:=0;
v_OrderDate DATE;
v_Currency_ID VARCHAR2(32);
v_Org_ID VARCHAR2(32);
v_client_ID VARCHAR2(32);

TYPE RECORD IS REF CURSOR;
Cur_Params RECORD;

BEGIN

  FOR Cur_Params IN (
    SELECT *
    FROM ad_ep_instance_para
    WHERE ad_ep_instance_id = p_ep_instance
    ) LOOP
    IF (cur_params.parametername LIKE 'DocAction') THEN
      p_docaction := Cur_Params.p_string;
    ELSIF (cur_params.parametername LIKE 'Record_ID') THEN
      p_record_id := cur_params.p_string;
    ELSIF (cur_params.parametername LIKE 'User') THEN
      p_user := cur_params.p_string;
    ELSIF (cur_params.parametername LIKE 'Message') THEN
      p_message := cur_params.p_text;
    ELSIF (cur_params.parametername LIKE 'Result') THEN
      p_result := cur_params.p_number;
    END IF;
  END LOOP;

  -- Reading the order
  v_ResultStr:='ReadingOrder';
  SELECT ad_client_id, ad_org_id, 
         grandtotal, dateordered, c_currency_id
    INTO v_client_id, v_org_id,
         v_grandtotal, v_orderdate, v_currency_id
  FROM c_order
  WHERE c_order_id = p_record_id;

  IF (p_docaction = 'CO') THEN
    v_resultstr := 'Insert payment schedule on completion';
    INSERT
    INTO fin_payment_schedule
    (
      fin_payment_schedule_id, ad_client_id, ad_org_id, isactive,
      created, createdby, updated, updatedby,
      c_invoice_id, c_currency_id, c_order_id,
      fin_paymentmethod_id, amount, duedate,
      outstandingamt
     )
    VALUES
    (
      get_uuid(), v_Client_ID, v_Org_ID, 'Y',
      now(), p_user, now(), p_user,
      null, v_currency_id, p_record_id,
      'to-do', v_grandtotal, v_orderdate,
      v_grandtotal
    );
  ELSIF (p_docaction = 'RE') THEN
    -- check there is not any paid payment
    DECLARE
      v_count NUMBER;
    BEGIN
      SELECT count(*) INTO v_count
      FROM fin_payment_schedule
      WHERE c_order_id = p_record_id
        AND paidamt <> 0;
      IF (v_count <> 0) THEN
        RAISE_APPLICATION_ERROR(-20000, '@OrderHasPayments@');
      END IF;
      v_resultstr:='Delete scheduled payments';
      DELETE FROM fin_payment_schedule
      WHERE c_order_id = p_record_id;
    END;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('FIN_GENERATE_PAYMENT_SCHEDULE exception: '|| v_ResultStr);
  RAISE;
END FIN_GEN_PAYMENTSCHEDULE_ORD
]]></body>
    </function>
  </database>
