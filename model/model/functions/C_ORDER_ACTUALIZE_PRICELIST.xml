<?xml version="1.0"?>
  <database name="FUNCTION C_ORDER_ACTUALIZE_PRICELIST">
    <function name="C_ORDER_ACTUALIZE_PRICELIST" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SL
* All portions are Copyright (C) 2001-2006 Openbravo SL
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistics
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- Success
  v_ResultStr_aux VARCHAR2(2000):='';
  v_DateFrom DATE;
  v_DateTo DATE;
  v_Warehouse_ID VARCHAR2(32) ;
  v_BPartner_ID VARCHAR2(32) ;
  --
  v_pinstance VARCHAR2(32) ;
  v_priceList VARCHAR2(32) ;
  v_priceListVersion VARCHAR2(32) ;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_PEDIDOS RECORD;
    Cur_PRICELISTVERSION RECORD;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;


    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr_aux:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PINSTANCE i
      LEFT JOIN AD_PINSTANCE_PARA p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      IF(Cur_Parameter.ParameterName='DateFrom') THEN
        v_DateFrom:=Cur_Parameter.P_Date;
        DBMS_OUTPUT.PUT_LINE('  DateFrom=' || v_DateFrom) ;
      ELSIF(Cur_Parameter.ParameterName='DateTo') THEN
        v_DateTo:=Cur_Parameter.P_Date;
        DBMS_OUTPUT.PUT_LINE('  DateTo=' || v_DateTo) ;
      ELSIF(Cur_Parameter.ParameterName='C_BPartner_ID') THEN
        v_BPartner_ID:=Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  C_BPartner_ID=' || v_BPartner_ID) ;
      ELSE
        DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
      END IF;
    END LOOP; -- Get Parameter
    FOR Cur_PEDIDOS IN
      (SELECT Ad_Client_ID,  C_Order_ID,   C_BPartner_ID,   DateOrdered
      FROM C_ORDER
      WHERE C_ORDER.IsSoTrx='Y'
        AND DateOrdered>=v_DateFrom
        AND DateOrdered<v_DateTo
        AND C_BPartner_ID=v_BPartner_ID
      )
    LOOP
      BEGIN -- FOR COMMIT
        UPDATE C_ORDER SET DocAction='RE' WHERE C_Order_ID=Cur_PEDIDOS.C_Order_ID;
        Ad_Sequence_Next('AD_PInstance', Cur_PEDIDOS.Ad_Client_ID, v_pinstance) ;
        INSERT
        INTO AD_PINSTANCE
          (
            Ad_PInstance_ID, Ad_Process_ID, Record_ID, IsProcessing,
            Created, Ad_User_ID, Updated, Result,
            ErrorMsg, Ad_Client_ID, Ad_Org_ID, CreatedBy,
            UpdatedBy, Isactive
          )
          VALUES
          (
            v_pinstance, '104', Cur_PEDIDOS.C_Order_ID, 'N',
            now(), '100', now(), NULL,
            NULL, Cur_PEDIDOS.Ad_Client_ID, '0', '100',
            '100', 'Y'
          )
          ;
        -- This Commit must remanin due differences between PL execution in Oracle and Postgres
        COMMIT;
      EXCEPTION WHEN OTHERS THEN RAISE NO_DATA_FOUND;
      END;--FOR  COMMIT


       C_ORDER_POST(v_pinstance) ;
       SELECT Result,
         ErrorMsg
       INTO v_Result,
         v_ResultStr
       FROM AD_PINSTANCE
       WHERE Ad_Pinstance_ID=v_pinstance;
       DBMS_OUTPUT.PUT_LINE('Reactivating c_order_id: ' || Cur_PEDIDOS.C_Order_ID || ' Result: ' || v_result || ' Message: '|| v_ResultStr) ;
       IF(v_Result<>0) THEN
         SELECT M_PriceList_ID
         INTO v_priceList
         FROM C_BPARTNER
         WHERE C_BPartner_ID=Cur_PEDIDOS.C_Bpartner_ID;
         FOR Cur_PRICELISTVERSION IN
           (SELECT M_PriceList_Version_ID
           FROM M_PRICELIST_VERSION
           WHERE M_PriceList_ID=v_priceList
             AND IsActive='Y'
             AND ValidFrom<Cur_PEDIDOS.DateOrdered
           ORDER BY ValidFrom DESC
           )
         LOOP
           v_priceListVersion:=Cur_PRICELISTVERSION.M_PriceList_Version_ID;
           EXIT;
         END LOOP;
         DBMS_OUTPUT.PUT_LINE('M_pricelist_version_id: ' || v_priceListVersion) ;
         UPDATE C_ORDER
           SET M_PriceList_ID=v_priceList
         WHERE C_Order_ID=Cur_PEDIDOS.C_Order_ID;
         IF(v_priceListVersion IS NOT NULL) THEN
           UPDATE C_ORDERLINE
             SET PriceList=(SELECT COALESCE(MAX(PriceList), 0)
                 FROM M_PRODUCTPRICE
                 WHERE M_PriceList_Version_ID=v_priceListVersion
                   AND M_Product_ID=C_ORDERLINE.M_Product_ID),
             PriceActual=M_Get_Offers_Price(Cur_PEDIDOS.DateOrdered, Cur_PEDIDOS.C_BPartner_ID, C_ORDERLINE.M_PRODUCT_ID,
                     (SELECT COALESCE(MAX(PriceSTD), 0)
                     FROM M_PRODUCTPRICE
                     WHERE M_PriceList_Version_ID=v_priceListVersion
                       AND M_Product_ID=C_ORDERLINE.M_Product_ID), (SELECT QtyOrdered
                           FROM C_ORDERLINE O2
                        WHERE O2.C_OrderLine_ID=C_ORDERLINE.C_OrderLine_Id),v_priceList),
             PriceLimit=(SELECT COALESCE(MAX(PriceLimit), 0)
                 FROM M_PRODUCTPRICE
                 WHERE M_PriceList_Version_ID=v_priceListVersion
                   AND M_Product_ID=C_ORDERLINE.M_Product_ID),
             PriceStd=(SELECT COALESCE(MAX(PriceSTD), 0)
             FROM M_PRODUCTPRICE
             WHERE M_PriceList_Version_ID=v_priceListVersion
               AND M_Product_ID=C_ORDERLINE.M_Product_ID)
           WHERE C_Order_ID=Cur_PEDIDOS.C_Order_ID;
         END IF;
         BEGIN -- FOR COMMIT
           UPDATE C_ORDER SET DocAction='CO' WHERE C_Order_ID=Cur_PEDIDOS.C_Order_ID;
           Ad_Sequence_Next('AD_PInstance', Cur_PEDIDOS.AD_Client_ID, v_pinstance) ;
           INSERT
           INTO AD_PINSTANCE
             (
               Ad_PInstance_ID, Ad_Process_ID, Record_ID, IsProcessing,
               Created, Ad_User_ID, Updated, Result,
               ErrorMsg, Ad_Client_ID, Ad_Org_ID, CreatedBy,
               UpdatedBy, IsActive
             )
             VALUES
             (
               v_pinstance, '104', Cur_PEDIDOS.C_Order_ID, 'N',
               now(), '100', now(), NULL,
               NULL, Cur_PEDIDOS.Ad_Client_ID, '0', '100',
               '100', 'Y'
             )
             ;
             -- This Commit must remanin due differences between PL execution in Oracle and Postgres
             COMMIT;
           EXCEPTION WHEN OTHERS THEN RAISE NO_DATA_FOUND;
           END; -- FOR COMMIT
           BEGIN -- FOR COMMIT
             C_ORDER_POST(v_pinstance) ;
             DBMS_OUTPUT.PUT_LINE('Reactivating c_order_id: ' || Cur_PEDIDOS.C_Order_ID || ' Result: ' || v_result || ' Message: '|| v_ResultStr) ;
           EXCEPTION WHEN OTHERS THEN RAISE NO_DATA_FOUND;
           END; -- FOR COMMIT
       END IF;
    END LOOP;
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', v_Result, v_ResultStr) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  ROLLBACK;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END C_ORDER_ACTUALIZE_PRICELIST
]]></body>
    </function>
  </database>
